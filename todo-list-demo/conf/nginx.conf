worker_processes  4;

error_log logs/error.log;

events {
    worker_connections 10240;
}

http {
    include mime.types;
    default_type  application/octet-stream;

    resolver 8.8.8.8;
    #resolver 202.106.46.151;

    sendfile on;
    gzip on;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    log_format hadditlog '$remote_addr - $remote_user [$request_time] [$time_local]  '
    '"$request" $status  $body_bytes_sent '
    '"$http_referer" "$http_user_agent"';
    access_log logs/access.log hadditlog;
    #access_log off;
    #error_log /dev/null crit;

    lua_shared_dict haddit_shared_dict 300m;
    upstream my_pg_backend {
	postgres_server 127.0.0.1 dbname='todo-list' user=cfy password=foobar;
	postgres_keepalive max=50 mode=single overflow=ignore;
    }
    server {
        listen 9800;

        encrypted_session_key       "This is a very long day than bef";
        encrypted_session_iv        "12345678123456";
        encrypted_session_expires   30d;

        #static file directory
        location ~ ^/(static|media)/ {
            root    '__MOOCHINE_APP_PATH_VALUE__';
            expires 30d;
        }

	lua_code_cache off;
        location / {
            default_type text/html;

            set $MOOCHINE_HOME      '__MOOCHINE_HOME_VALUE__';
            set $MOOCHINE_APP_NAME  'moochine-demo';
            set $MOOCHINE_APP_PATH  '__MOOCHINE_APP_PATH_VALUE__';

            #access_by_lua_file     '$MOOCHINE_HOME/luasrc/mch_access.lua';
            content_by_lua_file     '$MOOCHINE_HOME/luasrc/mch_content.lua';
        }
	location = '/db/_count_items' {
	    postgres_query "select count(1) from tl_items";
	    postgres_pass my_pg_backend;
	    rds_json on;
	}
	location = '/db/_delete_item'{
	    set_unescape_uri $id $arg_id;
	    set_quote_pgsql_str $q_id $id;
	    postgres_query "delete from tl_items where item_id = $id";
	    postgres_pass my_pg_backend;
	    rds_json on;
	}
	location = '/db/_update_item'{
	    set_unescape_uri $id $arg_id;
	    set_unescape_uri $state $arg_state;
	    set_unescape_uri $title $arg_title;
	    set_unescape_uri $content $arg_content;
	    set_quote_pgsql_str $q_id $id;
	    set_quote_pgsql_str $q_state $state;
	    set_quote_pgsql_str $q_title $title;
	    set_quote_pgsql_str $q_content $content;
	    postgres_query "update tl_items set item_todo_state = $q_state,item_title = $q_title,item_content = $q_content where item_id = $id";
	    postgres_pass my_pg_backend;
	    rds_json on;
	}
	location = '/db/_get_item'{
	    set_unescape_uri $id $arg_id;
	    set_quote_pgsql_str $q_id $id;
	    postgres_query "select * from tl_items where item_id = $q_id";
	    postgres_pass my_pg_backend;
	    rds_json on;
	}
	location = '/db/_get_items' {
	    set_unescape_uri $start $arg_start;
    	    set_if_empty $start 0;
	    set_unescape_uri $limit $arg_limit;
	    set_if_empty $limit 30;
	    set_by_lua $limit "return math.min(100,ngx.arg[1])" $limit;
       	    set_quote_pgsql_str $quoted_start $start;
	    set_quote_pgsql_str $quoted_limit $limit;
	    postgres_query "select * from tl_items order by item_id limit $quoted_limit offset $quoted_start";
	    postgres_pass my_pg_backend;
	    rds_json on;
   	}
	location = '/db/_create_item' {
	    set_unescape_uri $state $arg_state;
	    set_unescape_uri $title $arg_title;
	    set_unescape_uri $content $arg_content;
	    set_quote_pgsql_str $q_state $state;
	    set_quote_pgsql_str $q_title $title;
	    set_quote_pgsql_str $q_content $content;
	    postgres_query "insert into tl_items (item_todo_state,item_title,item_content) values($q_state,$q_title,$q_content);";
	    postgres_pass my_pg_backend;
	    rds_json on;
	}
    }
}

